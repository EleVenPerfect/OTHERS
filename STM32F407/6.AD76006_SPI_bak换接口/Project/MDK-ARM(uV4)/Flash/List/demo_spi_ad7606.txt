; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\demo_spi_ad7606.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\demo_spi_ad7606.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\demo_spi_ad7606.crf ..\..\User\demo_spi_ad7606.c]
                          THUMB

                          AREA ||i.AD7606_Disp||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  AD7606_Disp PROC
;;;149    */
;;;150    void AD7606_Disp(void)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;151    {
;;;152    	unsigned short int i;	
;;;153    	unsigned short int iTemp;
;;;154    
;;;155    	/* 打印采集数据 */
;;;156    	for (i = 0; i < CH_NUM; i++)
000004  2400              MOVS     r4,#0
000006  e05d              B        |L1.196|
                  |L1.8|
;;;157    	{                
;;;158       		iTemp = s_volt[i];	/* uV  */
000008  4832              LDR      r0,|L1.212|
00000a  f8300014          LDRH     r0,[r0,r4,LSL #1]
00000e  b285              UXTH     r5,r0
;;;159    		
;;;160    		if (s_dat[i] < 0)
000010  4831              LDR      r0,|L1.216|
000012  f9300014          LDRSH    r0,[r0,r4,LSL #1]
000016  2800              CMP      r0,#0
000018  da2b              BGE      |L1.114|
;;;161    		{
;;;162    			iTemp = -iTemp;
00001a  4268              RSBS     r0,r5,#0
00001c  b285              UXTH     r5,r0
;;;163          printf(" CH%d = %6d,0x%04X (-%d.%d%d%d V) \r\n", i+1, s_dat[i], (unsigned short int)s_dat[i], iTemp /1000, (iTemp%1000)/100, (iTemp%100)/10,iTemp%10);
00001e  200a              MOVS     r0,#0xa
000020  fb95f1f0          SDIV     r1,r5,r0
000024  fb005611          MLS      r6,r0,r1,r5
000028  2064              MOVS     r0,#0x64
00002a  fb95f1f0          SDIV     r1,r5,r0
00002e  fb005011          MLS      r0,r0,r1,r5
000032  210a              MOVS     r1,#0xa
000034  fb90f7f1          SDIV     r7,r0,r1
000038  f44f707a          MOV      r0,#0x3e8
00003c  fb95f1f0          SDIV     r1,r5,r0
000040  fb005011          MLS      r0,r0,r1,r5
000044  2164              MOVS     r1,#0x64
000046  fb90f8f1          SDIV     r8,r0,r1
00004a  f44f707a          MOV      r0,#0x3e8
00004e  fb95f9f0          SDIV     r9,r5,r0
000052  4821              LDR      r0,|L1.216|
000054  e9cd9800          STRD     r9,r8,[sp,#0]
000058  e9cd7602          STRD     r7,r6,[sp,#8]
00005c  f8300014          LDRH     r0,[r0,r4,LSL #1]
000060  b283              UXTH     r3,r0
000062  481d              LDR      r0,|L1.216|
000064  f9302014          LDRSH    r2,[r0,r4,LSL #1]
000068  1c61              ADDS     r1,r4,#1
00006a  a01c              ADR      r0,|L1.220|
00006c  f7fffffe          BL       __2printf
000070  e026              B        |L1.192|
                  |L1.114|
;;;164    		}
;;;165    		else
;;;166    		{
;;;167          printf(" CH%d = %6d,0x%04X ( %d.%d%d%d V) \r\n", i+1, s_dat[i], s_dat[i] , iTemp /1000, (iTemp%1000)/100, (iTemp%100)/10,iTemp%10);                    
000072  200a              MOVS     r0,#0xa
000074  fb95f1f0          SDIV     r1,r5,r0
000078  fb005611          MLS      r6,r0,r1,r5
00007c  2064              MOVS     r0,#0x64
00007e  fb95f1f0          SDIV     r1,r5,r0
000082  fb005011          MLS      r0,r0,r1,r5
000086  210a              MOVS     r1,#0xa
000088  fb90f7f1          SDIV     r7,r0,r1
00008c  f44f707a          MOV      r0,#0x3e8
000090  fb95f1f0          SDIV     r1,r5,r0
000094  fb005011          MLS      r0,r0,r1,r5
000098  2164              MOVS     r1,#0x64
00009a  fb90f8f1          SDIV     r8,r0,r1
00009e  f44f707a          MOV      r0,#0x3e8
0000a2  fb95f9f0          SDIV     r9,r5,r0
0000a6  480c              LDR      r0,|L1.216|
0000a8  e9cd9800          STRD     r9,r8,[sp,#0]
0000ac  e9cd7602          STRD     r7,r6,[sp,#8]
0000b0  f9303014          LDRSH    r3,[r0,r4,LSL #1]
0000b4  f9302014          LDRSH    r2,[r0,r4,LSL #1]
0000b8  1c61              ADDS     r1,r4,#1
0000ba  a012              ADR      r0,|L1.260|
0000bc  f7fffffe          BL       __2printf
                  |L1.192|
0000c0  1c60              ADDS     r0,r4,#1              ;156
0000c2  b284              UXTH     r4,r0                 ;156
                  |L1.196|
0000c4  2c08              CMP      r4,#8                 ;156
0000c6  db9f              BLT      |L1.8|
;;;168    		}
;;;169    	}
;;;170    	printf("\33[%dA", (int)CH_NUM);  /* 光标上移n行 */		
0000c8  2108              MOVS     r1,#8
0000ca  a018              ADR      r0,|L1.300|
0000cc  f7fffffe          BL       __2printf
;;;171    }
0000d0  e8bd87ff          POP      {r0-r10,pc}
;;;172    
                          ENDP

                  |L1.212|
                          DCD      s_volt
                  |L1.216|
                          DCD      s_dat
                  |L1.220|
0000dc  20434825          DCB      " CH%d = %6d,0x%04X (-%d.%d%d%d V) \r\n",0
0000e0  64203d20
0000e4  2536642c
0000e8  30782530
0000ec  34582028
0000f0  2d25642e
0000f4  25642564
0000f8  25642056
0000fc  29200d0a
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L1.260|
000104  20434825          DCB      " CH%d = %6d,0x%04X ( %d.%d%d%d V) \r\n",0
000108  64203d20
00010c  2536642c
000110  30782530
000114  34582028
000118  2025642e
00011c  25642564
000120  25642056
000124  29200d0a
000128  00      
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0
                  |L1.300|
00012c  1b5b2564          DCB      27,"[%dA",0
000130  4100    
000132  00                DCB      0
000133  00                DCB      0

                          AREA ||i.AD7606_Mak||, CODE, READONLY, ALIGN=2

                  AD7606_Mak PROC
;;;100    */
;;;101    void AD7606_Mak(void)
000000  b570              PUSH     {r4-r6,lr}
;;;102    {
;;;103    	unsigned char i;
;;;104    	unsigned short int adc;
;;;105    
;;;106    	for (i = 0;i < CH_NUM; i++)
000002  2400              MOVS     r4,#0
000004  e04c              B        |L2.160|
                  |L2.6|
;;;107    	{	
;;;108    		s_dat[i] = AD7606_ReadAdc(i);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       AD7606_ReadAdc
00000c  4926              LDR      r1,|L2.168|
00000e  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;109    	/* 
;;;110    		32767 = 5V , 这是理论值，实际可以根据5V基准的实际值进行公式矫正 
;;;111    		volt[i] = ((int16_t)dat[i] * 5000) / 32767;	计算实际电压值（近似估算的），如需准确，请进行校准            
;;;112    		volt[i] = dat[i] * 0.3051850947599719
;;;113    	*/
;;;114    		
;;;115    		if(s_dat[i]>=0)
000012  4608              MOV      r0,r1
000014  f9300014          LDRSH    r0,[r0,r4,LSL #1]
000018  2800              CMP      r0,#0
00001a  db1e              BLT      |L2.90|
;;;116    		{
;;;117    				adc = s_dat[i];
00001c  4608              MOV      r0,r1
00001e  f8300014          LDRH     r0,[r0,r4,LSL #1]
000022  b285              UXTH     r5,r0
;;;118    				if (g_tAD7606.Range == 0)
000024  4821              LDR      r0,|L2.172|
000026  7800              LDRB     r0,[r0,#0]  ; g_tAD7606
000028  b958              CBNZ     r0,|L2.66|
;;;119    				{
;;;120    					s_volt[i] = (adc * 5000) / 32767;
00002a  f2413088          MOV      r0,#0x1388
00002e  4368              MULS     r0,r5,r0
000030  f64771ff          MOV      r1,#0x7fff
000034  fb90f0f1          SDIV     r0,r0,r1
000038  b200              SXTH     r0,r0
00003a  491d              LDR      r1,|L2.176|
00003c  f8210014          STRH     r0,[r1,r4,LSL #1]
000040  e02c              B        |L2.156|
                  |L2.66|
;;;121    				}
;;;122    				else
;;;123    				{
;;;124    					s_volt[i] = (adc * 10000) / 32767;
000042  f2427010          MOV      r0,#0x2710
000046  4368              MULS     r0,r5,r0
000048  f64771ff          MOV      r1,#0x7fff
00004c  fb90f0f1          SDIV     r0,r0,r1
000050  b200              SXTH     r0,r0
000052  4917              LDR      r1,|L2.176|
000054  f8210014          STRH     r0,[r1,r4,LSL #1]
000058  e020              B        |L2.156|
                  |L2.90|
;;;125    				}
;;;126    		}
;;;127    		else
;;;128    		{
;;;129    				adc = -s_dat[i];
00005a  4813              LDR      r0,|L2.168|
00005c  f8300014          LDRH     r0,[r0,r4,LSL #1]
000060  4240              RSBS     r0,r0,#0
000062  b285              UXTH     r5,r0
;;;130    				if (g_tAD7606.Range == 0)
000064  4811              LDR      r0,|L2.172|
000066  7800              LDRB     r0,[r0,#0]  ; g_tAD7606
000068  b960              CBNZ     r0,|L2.132|
;;;131    				{
;;;132    					s_volt[i] = -(adc * 5000) / 32767;
00006a  f2413088          MOV      r0,#0x1388
00006e  4368              MULS     r0,r5,r0
000070  4240              RSBS     r0,r0,#0
000072  f64771ff          MOV      r1,#0x7fff
000076  fb90f0f1          SDIV     r0,r0,r1
00007a  b200              SXTH     r0,r0
00007c  490c              LDR      r1,|L2.176|
00007e  f8210014          STRH     r0,[r1,r4,LSL #1]
000082  e00b              B        |L2.156|
                  |L2.132|
;;;133    				}
;;;134    				else
;;;135    				{
;;;136    					s_volt[i] = -(adc * 10000) / 32767;
000084  f2427010          MOV      r0,#0x2710
000088  4368              MULS     r0,r5,r0
00008a  4240              RSBS     r0,r0,#0
00008c  f64771ff          MOV      r1,#0x7fff
000090  fb90f0f1          SDIV     r0,r0,r1
000094  b200              SXTH     r0,r0
000096  4906              LDR      r1,|L2.176|
000098  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L2.156|
00009c  1c60              ADDS     r0,r4,#1              ;106
00009e  b2c4              UXTB     r4,r0                 ;106
                  |L2.160|
0000a0  2c08              CMP      r4,#8                 ;106
0000a2  dbb0              BLT      |L2.6|
;;;137    				}
;;;138    		}
;;;139    	}
;;;140    }
0000a4  bd70              POP      {r4-r6,pc}
;;;141     
                          ENDP

0000a6  0000              DCW      0x0000
                  |L2.168|
                          DCD      s_dat
                  |L2.172|
                          DCD      g_tAD7606
                  |L2.176|
                          DCD      s_volt

                          AREA ||i.Demo_spi_AD7606||, CODE, READONLY, ALIGN=2

                  Demo_spi_AD7606 PROC
;;;35     */
;;;36     void Demo_spi_AD7606(void)
000000  b508              PUSH     {r3,lr}
;;;37     {
;;;38     	uint8_t cmd;
;;;39     
;;;40     	/*
;;;41     		由于ST固件库的启动文件已经执行了CPU系统时钟的初始化，所以不必再次重复配置系统时钟。
;;;42     		启动文件配置了CPU主时钟频率、内部Flash访问速度和可选的外部SRAM FSMC初始化。
;;;43     	*/
;;;44     	g_tAD7606.Range = 1;	/* 10V */
000002  2001              MOVS     r0,#1
000004  4919              LDR      r1,|L3.108|
000006  7008              STRB     r0,[r1,#0]
;;;45     
;;;46     	bsp_spi_InitAD7606();	/* 配置AD7606所用的GPIO */
000008  f7fffffe          BL       bsp_spi_InitAD7606
;;;47     
;;;48     	bsp_StartAutoTimer(0, 1);	/* 启动1个500ms的自动重装的定时器 */
00000c  2101              MOVS     r1,#1
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       bsp_StartAutoTimer
;;;49     
;;;50     	DispMenu();			/* 显示操作菜单 */	
000014  f7fffffe          BL       DispMenu
;;;51     	while (1)
000018  e027              B        |L3.106|
                  |L3.26|
;;;52     	{
;;;53     		bsp_Idle();		/* 空闲时执行的函数,比如喂狗. 在bsp.c中 */
00001a  f7fffffe          BL       bsp_Idle
;;;54     
;;;55     		if (bsp_CheckTimer(0))
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       bsp_CheckTimer
000024  b128              CBZ      r0,|L3.50|
;;;56     		{	
;;;57     			/* 每隔100ms 进来一次. 由软件启动转换 */
;;;58     			AD7606_Scan();
000026  f7fffffe          BL       AD7606_Scan
;;;59     		
;;;60     			/* 处理数据 */
;;;61     			AD7606_Mak();
00002a  f7fffffe          BL       AD7606_Mak
;;;62     										 
;;;63     			/* 打印ADC采样结果 */
;;;64     			AD7606_Disp();		
00002e  f7fffffe          BL       AD7606_Disp
                  |L3.50|
;;;65     		}
;;;66     		
;;;67     		if (comGetChar(COM1, &cmd))	/* 从串口读入一个字符(非阻塞方式) */
000032  4669              MOV      r1,sp
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       comGetChar
00003a  b1b0              CBZ      r0,|L3.106|
;;;68     		{
;;;69     			switch (cmd)
00003c  f89d0000          LDRB     r0,[sp,#0]
000040  2831              CMP      r0,#0x31
000042  d10e              BNE      |L3.98|
;;;70     			{
;;;71     				case '1':
;;;72     					if (g_tAD7606.Range == 0)
000044  4809              LDR      r0,|L3.108|
000046  7800              LDRB     r0,[r0,#0]  ; g_tAD7606
000048  b918              CBNZ     r0,|L3.82|
;;;73     					{
;;;74     						g_tAD7606.Range = 1;
00004a  2001              MOVS     r0,#1
00004c  4907              LDR      r1,|L3.108|
00004e  7008              STRB     r0,[r1,#0]
000050  e002              B        |L3.88|
                  |L3.82|
;;;75     					}
;;;76     					else
;;;77     					{
;;;78     						g_tAD7606.Range = 0;
000052  2000              MOVS     r0,#0
000054  4905              LDR      r1,|L3.108|
000056  7008              STRB     r0,[r1,#0]
                  |L3.88|
;;;79     					}
;;;80     					AD7606_SetInputRange(g_tAD7606.Range);
000058  4904              LDR      r1,|L3.108|
00005a  7808              LDRB     r0,[r1,#0]  ; g_tAD7606
00005c  f7fffffe          BL       AD7606_SetInputRange
;;;81     					break;
000060  e002              B        |L3.104|
                  |L3.98|
;;;82     
;;;83     				default:
;;;84     					DispMenu();	/* 无效命令，重新打印命令提示 */
000062  f7fffffe          BL       DispMenu
;;;85     					break;
000066  bf00              NOP      
                  |L3.104|
000068  bf00              NOP                            ;81
                  |L3.106|
00006a  e7d6              B        |L3.26|
;;;86     
;;;87     			}
;;;88     		}
;;;89     	}
;;;90     }
;;;91     
                          ENDP

                  |L3.108|
                          DCD      g_tAD7606

                          AREA ||i.DispMenu||, CODE, READONLY, ALIGN=2

                  DispMenu PROC
;;;182    */
;;;183    static void DispMenu(void)
000000  b510              PUSH     {r4,lr}
;;;184    {
;;;185    	printf("\r\n------------------------------------------------\r\n");
000002  a006              ADR      r0,|L4.28|
000004  f7fffffe          BL       __2printf
;;;186    	printf("请选择操作命令:\r\n");
000008  a012              ADR      r0,|L4.84|
00000a  f7fffffe          BL       __2printf
;;;187    	printf("1 - 切换量程(5V或10V)\r\n");
00000e  a016              ADR      r0,|L4.104|
000010  f7fffffe          BL       __2printf
;;;188    	printf("\r\n");
000014  a01a              ADR      r0,|L4.128|
000016  f7fffffe          BL       __2printf
;;;189    }
00001a  bd10              POP      {r4,pc}
;;;190    
                          ENDP

                  |L4.28|
00001c  0d0a2d2d          DCB      "\r\n------------------------------------------------\r\n"
000020  2d2d2d2d
000024  2d2d2d2d
000028  2d2d2d2d
00002c  2d2d2d2d
000030  2d2d2d2d
000034  2d2d2d2d
000038  2d2d2d2d
00003c  2d2d2d2d
000040  2d2d2d2d
000044  2d2d2d2d
000048  2d2d2d2d
00004c  2d2d0d0a
000050  00                DCB      0
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0
                  |L4.84|
000054  c7ebd1a1          DCB      199,235,209,161,212,241,178,217,215,247,195,252,193,238,":"
000058  d4f1b2d9
00005c  d7f7c3fc
000060  c1ee3a  
000063  0d0a00            DCB      "\r\n",0
000066  00                DCB      0
000067  00                DCB      0
                  |L4.104|
000068  31202d20          DCB      "1 - ",199,208,187,187,193,191,179,204,"(5V",187,242,"10"
00006c  c7d0bbbb
000070  c1bfb3cc
000074  283556bb
000078  f23130  
00007b  56290d0a          DCB      "V)\r\n",0
00007f  00      
                  |L4.128|
000080  0d0a00            DCB      "\r\n",0
000083  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  s_volt
                          %        16
                  s_dat
                          %        16

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\demo_spi_ad7606.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_demo_spi_ad7606_c_a4009e96____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_demo_spi_ad7606_c_a4009e96____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_demo_spi_ad7606_c_a4009e96____REVSH|
#line 144
|__asm___17_demo_spi_ad7606_c_a4009e96____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
